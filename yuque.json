[
  {
    "id": 74669507,
    "slug": "pg2iqc",
    "title": "1052.爱生气的书店老板",
    "book_id": 27055002,
    "book": {
      "id": 27055002,
      "type": "Book",
      "slug": "leetcode",
      "name": "leetcode",
      "user_id": 328252,
      "description": "",
      "creator_id": 328252,
      "public": 1,
      "items_count": 2,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2022-04-23T13:10:06.640Z",
      "updated_at": "2022-04-23T13:10:07.000Z",
      "created_at": "2022-04-23T06:49:14.000Z",
      "namespace": "lmikoto/leetcode",
      "user": {
        "id": 328252,
        "type": "User",
        "login": "lmikoto",
        "name": "lmikoto",
        "description": null,
        "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/328252/1578028416108-avatar/38f12fe6-da0d-471e-819c-7131fadbd750.png",
        "books_count": 16,
        "public_books_count": 2,
        "followers_count": 0,
        "following_count": 0,
        "created_at": "2019-04-25T04:31:29.000Z",
        "updated_at": "2022-04-23T06:50:32.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 328252,
    "creator": {
      "id": 328252,
      "type": "User",
      "login": "lmikoto",
      "name": "lmikoto",
      "description": null,
      "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/328252/1578028416108-avatar/38f12fe6-da0d-471e-819c-7131fadbd750.png",
      "books_count": 16,
      "public_books_count": 2,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2019-04-25T04:31:29.000Z",
      "updated_at": "2022-04-23T06:50:32.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "> 滑动窗口\n\n<a name=\"LyAbf\"></a>\n## 方法一滑动窗口\n<a name=\"tblXh\"></a>\n### 解题思路\n当书店老板不生气的时候，顾客满意度是固定的。所以生气的时候可以改变的满意度影响着最后的结果，所以这个题就转变成了求最大的可以改变的满意度。\n\n首先遍历一边`customers`计算出不受影响的满意顾客数的合。并且把这些`customer`置为0。然后使用滑动窗口计算最大的增长量。最后返回不受影响的 + 最大增长量即可。\n\n![1052. 爱生气的书店老板.gif](https://cdn.nlark.com/yuque/0/2022/gif/328252/1650696869692-388174e2-e8ef-4854-92f5-4c39eeac6988.gif#clientId=ucec67e16-1406-4&crop=0&crop=0&crop=1&crop=1&from=ui&id=ud0aac056&margin=%5Bobject%20Object%5D&name=1052.%20%E7%88%B1%E7%94%9F%E6%B0%94%E7%9A%84%E4%B9%A6%E5%BA%97%E8%80%81%E6%9D%BF.gif&originHeight=270&originWidth=480&originalType=binary&ratio=1&rotation=0&showTitle=false&size=28885&status=done&style=none&taskId=u03fd31a5-cd47-42d4-b6e0-78a1a0883bb&title=)\n<a name=\"u0VRp\"></a>\n### 参考代码\n```python\nclass Solution:\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], minutes: int) -> int:\n        n = len(customers)\n        total = 0\n        for i in range(0,n):\n            if grumpy[i] == 0:\n                total += customers[i]\n                # 把不影响结果的置为0\n                customers[i] = 0\n        increase = 0\n        for i in range(0,minutes):\n            increase += customers[i]\n        max_increase = increase\n        for i in range(minutes,n):\n            increase = increase + customers[i] - customers[i - minutes]\n            max_increase = max(max_increase,increase)\n        return total + max_increase\n        \n```\n<a name=\"dPrBw\"></a>\n### 复杂度分析\n时间复杂度O(n) 遍历了两边数组<br />空间复杂度O(1)\n",
    "body_draft": "> 滑动窗口\n\n<a name=\"LyAbf\"></a>\n## 方法一滑动窗口\n<a name=\"tblXh\"></a>\n### 解题思路\n当书店老板不生气的时候，顾客满意度是固定的。所以生气的时候可以改变的满意度影响着最后的结果，所以这个题就转变成了求最大的可以改变的满意度。\n\n首先遍历一边`customers`计算出不受影响的满意顾客数的合。并且把这些`customer`置为0。然后使用滑动窗口计算最大的增长量。最后返回不受影响的 + 最大增长量即可。\n\n![1052. 爱生气的书店老板.gif](https://cdn.nlark.com/yuque/0/2022/gif/328252/1650696869692-388174e2-e8ef-4854-92f5-4c39eeac6988.gif#clientId=ucec67e16-1406-4&crop=0&crop=0&crop=1&crop=1&from=ui&id=ud0aac056&margin=%5Bobject%20Object%5D&name=1052.%20%E7%88%B1%E7%94%9F%E6%B0%94%E7%9A%84%E4%B9%A6%E5%BA%97%E8%80%81%E6%9D%BF.gif&originHeight=270&originWidth=480&originalType=binary&ratio=1&rotation=0&showTitle=false&size=28885&status=done&style=none&taskId=u03fd31a5-cd47-42d4-b6e0-78a1a0883bb&title=)\n<a name=\"u0VRp\"></a>\n### 参考代码\n```python\nclass Solution:\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], minutes: int) -> int:\n        n = len(customers)\n        total = 0\n        for i in range(0,n):\n            if grumpy[i] == 0:\n                total += customers[i]\n                # 把不影响结果的置为0\n                customers[i] = 0\n        increase = 0\n        for i in range(0,minutes):\n            increase += customers[i]\n        max_increase = increase\n        for i in range(minutes,n):\n            increase = increase + customers[i] - customers[i - minutes]\n            max_increase = max(max_increase,increase)\n        return total + max_increase\n        \n```\n<a name=\"dPrBw\"></a>\n### 复杂度分析\n时间复杂度O(n) 遍历了两边数组<br />空间复杂度O(1)\n",
    "body_html": "<!doctype html><div class=\"lake-content\" typography=\"classic\"><div class=\"ne-quote\"><p id=\"ubb7ef511\" class=\"ne-p\"><span class=\"ne-text\">滑动窗口</span></p></div><h2 id=\"LyAbf\"><span class=\"ne-text\">方法一滑动窗口</span></h2><h3 id=\"tblXh\"><span class=\"ne-text\">解题思路</span></h3><p id=\"uefdb6c18\" class=\"ne-p\"><span class=\"ne-text\">当书店老板不生气的时候，顾客满意度是固定的。所以生气的时候可以改变的满意度影响着最后的结果，所以这个题就转变成了求最大的可以改变的满意度。</span></p><p id=\"uf04f9c75\" class=\"ne-p\"><span class=\"ne-text\"></span></p><p id=\"ucbbb67ab\" class=\"ne-p\"><span class=\"ne-text\">首先遍历一边</span><code class=\"ne-code\"><span class=\"ne-text\">customers</span></code><span class=\"ne-text\">计算出不受影响的满意顾客数的合。并且把这些</span><code class=\"ne-code\"><span class=\"ne-text\">customer</span></code><span class=\"ne-text\">置为0。然后使用滑动窗口计算最大的增长量。最后返回不受影响的 + 最大增长量即可。</span></p><p id=\"ue1386ad1\" class=\"ne-p\"><span class=\"ne-text\"></span></p><p id=\"u902ccf26\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2022/gif/328252/1650696869692-388174e2-e8ef-4854-92f5-4c39eeac6988.gif\" width=\"480\" id=\"ud0aac056\" class=\"ne-image\"></p><h3 id=\"u0VRp\"><span class=\"ne-text\">参考代码</span></h3><pre data-language=\"python\" id=\"dL7rI\" class=\"ne-codeblock language-python\">class Solution:\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], minutes: int) -&gt; int:\n        n = len(customers)\n        total = 0\n        for i in range(0,n):\n            if grumpy[i] == 0:\n                total += customers[i]\n                # 把不影响结果的置为0\n                customers[i] = 0\n        increase = 0\n        for i in range(0,minutes):\n            increase += customers[i]\n        max_increase = increase\n        for i in range(minutes,n):\n            increase = increase + customers[i] - customers[i - minutes]\n            max_increase = max(max_increase,increase)\n        return total + max_increase\n        </pre><h3 id=\"dPrBw\"><span class=\"ne-text\">复杂度分析</span></h3><p id=\"u37562ff2\" class=\"ne-p\"><span class=\"ne-text\">时间复杂度O(n) 遍历了两边数组</span></p><p id=\"u576e4cee\" class=\"ne-p\"><span class=\"ne-text\">空间复杂度O(1)</span></p></div>",
    "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"fixed\" /><blockquote data-lake-id=\"u14c08e0a\" id=\"u14c08e0a\"><p data-lake-id=\"ubb7ef511\" id=\"ubb7ef511\"><span data-lake-id=\"u53f9fcb3\" id=\"u53f9fcb3\">滑动窗口</span></p></blockquote><h2 data-lake-id=\"LyAbf\" id=\"LyAbf\"><span data-lake-id=\"ue5661832\" id=\"ue5661832\">方法一滑动窗口</span></h2><h3 data-lake-id=\"tblXh\" id=\"tblXh\"><span data-lake-id=\"u98eeb552\" id=\"u98eeb552\">解题思路</span></h3><p data-lake-id=\"uefdb6c18\" id=\"uefdb6c18\"><span data-lake-id=\"uc2ff10a3\" id=\"uc2ff10a3\">当书店老板不生气的时候，顾客满意度是固定的。所以生气的时候可以改变的满意度影响着最后的结果，所以这个题就转变成了求最大的可以改变的满意度。</span></p><p data-lake-id=\"uf04f9c75\" id=\"uf04f9c75\"><span data-lake-id=\"ub8ca3f7a\" id=\"ub8ca3f7a\">​</span><br></p><p data-lake-id=\"ucbbb67ab\" id=\"ucbbb67ab\"><span data-lake-id=\"u75eb1996\" id=\"u75eb1996\">首先遍历一边</span><code data-lake-id=\"u9df2bb73\" id=\"u9df2bb73\"><span data-lake-id=\"ue39eab54\" id=\"ue39eab54\">customers</span></code><span data-lake-id=\"u44063b2c\" id=\"u44063b2c\">计算出不受影响的满意顾客数的合。并且把这些</span><code data-lake-id=\"u60ffb511\" id=\"u60ffb511\"><span data-lake-id=\"uce70188d\" id=\"uce70188d\">customer</span></code><span data-lake-id=\"u1d2e4dfc\" id=\"u1d2e4dfc\">置为0。然后使用滑动窗口计算最大的增长量。最后返回不受影响的 + 最大增长量即可。</span></p><p data-lake-id=\"ue1386ad1\" id=\"ue1386ad1\"><span data-lake-id=\"ue1c144e8\" id=\"ue1c144e8\">​</span><br></p><p data-lake-id=\"u902ccf26\" id=\"u902ccf26\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2022%2Fgif%2F328252%2F1650696869692-388174e2-e8ef-4854-92f5-4c39eeac6988.gif%22%2C%22taskId%22%3A%22u03fd31a5-cd47-42d4-b6e0-78a1a0883bb%22%2C%22clientId%22%3A%22ucec67e16-1406-4%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%221052.%20%E7%88%B1%E7%94%9F%E6%B0%94%E7%9A%84%E4%B9%A6%E5%BA%97%E8%80%81%E6%9D%BF.gif%22%2C%22size%22%3A28885%2C%22from%22%3A%22ui%22%2C%22originWidth%22%3A480%2C%22originHeight%22%3A270%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22CUSTOMER%20GRUMPY%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A75.543816%2C%22y%22%3A114.68539%2C%22width%22%3A53.081474%2C%22height%22%3A9.930859999999996%2C%22text%22%3A%22CUSTOMER%22%7D%2C%7B%22x%22%3A75.55516%2C%22y%22%3A156.7051%2C%22width%22%3A44.70988%2C%22height%22%3A12.460020000000014%2C%22text%22%3A%22GRUMPY%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22id%22%3A%22ud0aac056%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><h3 data-lake-id=\"u0VRp\" id=\"u0VRp\"><span data-lake-id=\"u77884673\" id=\"u77884673\">参考代码</span></h3><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22python%22%2C%22code%22%3A%22class%20Solution%3A%5Cn%20%20%20%20def%20maxSatisfied(self%2C%20customers%3A%20List%5Bint%5D%2C%20grumpy%3A%20List%5Bint%5D%2C%20minutes%3A%20int)%20-%3E%20int%3A%5Cn%20%20%20%20%20%20%20%20n%20%3D%20len(customers)%5Cn%20%20%20%20%20%20%20%20total%20%3D%200%5Cn%20%20%20%20%20%20%20%20for%20i%20in%20range(0%2Cn)%3A%5Cn%20%20%20%20%20%20%20%20%20%20%20%20if%20grumpy%5Bi%5D%20%3D%3D%200%3A%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20total%20%2B%3D%20customers%5Bi%5D%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%8A%8A%E4%B8%8D%E5%BD%B1%E5%93%8D%E7%BB%93%E6%9E%9C%E7%9A%84%E7%BD%AE%E4%B8%BA0%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20customers%5Bi%5D%20%3D%200%5Cn%20%20%20%20%20%20%20%20increase%20%3D%200%5Cn%20%20%20%20%20%20%20%20for%20i%20in%20range(0%2Cminutes)%3A%5Cn%20%20%20%20%20%20%20%20%20%20%20%20increase%20%2B%3D%20customers%5Bi%5D%5Cn%20%20%20%20%20%20%20%20max_increase%20%3D%20increase%5Cn%20%20%20%20%20%20%20%20for%20i%20in%20range(minutes%2Cn)%3A%5Cn%20%20%20%20%20%20%20%20%20%20%20%20increase%20%3D%20increase%20%2B%20customers%5Bi%5D%20-%20customers%5Bi%20-%20minutes%5D%5Cn%20%20%20%20%20%20%20%20%20%20%20%20max_increase%20%3D%20max(max_increase%2Cincrease)%5Cn%20%20%20%20%20%20%20%20return%20total%20%2B%20max_increase%5Cn%20%20%20%20%20%20%20%20%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22dL7rI%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"dPrBw\" id=\"dPrBw\"><span data-lake-id=\"u83cf2c57\" id=\"u83cf2c57\">复杂度分析</span></h3><p data-lake-id=\"u37562ff2\" id=\"u37562ff2\"><span data-lake-id=\"ue85794fd\" id=\"ue85794fd\">时间复杂度O(n) 遍历了两边数组</span></p><p data-lake-id=\"u576e4cee\" id=\"u576e4cee\"><span data-lake-id=\"u1f37c1db\" id=\"u1f37c1db\">空间复杂度O(1)</span></p>",
    "body_draft_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"fixed\" /><blockquote data-lake-id=\"u14c08e0a\" id=\"u14c08e0a\"><p data-lake-id=\"ubb7ef511\" id=\"ubb7ef511\"><span data-lake-id=\"u53f9fcb3\" id=\"u53f9fcb3\">滑动窗口</span></p></blockquote><h2 data-lake-id=\"LyAbf\" id=\"LyAbf\"><span data-lake-id=\"ue5661832\" id=\"ue5661832\">方法一滑动窗口</span></h2><h3 data-lake-id=\"tblXh\" id=\"tblXh\"><span data-lake-id=\"u98eeb552\" id=\"u98eeb552\">解题思路</span></h3><p data-lake-id=\"uefdb6c18\" id=\"uefdb6c18\"><span data-lake-id=\"uc2ff10a3\" id=\"uc2ff10a3\">当书店老板不生气的时候，顾客满意度是固定的。所以生气的时候可以改变的满意度影响着最后的结果，所以这个题就转变成了求最大的可以改变的满意度。</span></p><p data-lake-id=\"uf04f9c75\" id=\"uf04f9c75\"><span data-lake-id=\"ub8ca3f7a\" id=\"ub8ca3f7a\">​</span><br></p><p data-lake-id=\"ucbbb67ab\" id=\"ucbbb67ab\"><span data-lake-id=\"u75eb1996\" id=\"u75eb1996\">首先遍历一边</span><code data-lake-id=\"u9df2bb73\" id=\"u9df2bb73\"><span data-lake-id=\"ue39eab54\" id=\"ue39eab54\">customers</span></code><span data-lake-id=\"u44063b2c\" id=\"u44063b2c\">计算出不受影响的满意顾客数的合。并且把这些</span><code data-lake-id=\"u60ffb511\" id=\"u60ffb511\"><span data-lake-id=\"uce70188d\" id=\"uce70188d\">customer</span></code><span data-lake-id=\"u1d2e4dfc\" id=\"u1d2e4dfc\">置为0。然后使用滑动窗口计算最大的增长量。最后返回不受影响的 + 最大增长量即可。</span></p><p data-lake-id=\"ue1386ad1\" id=\"ue1386ad1\"><span data-lake-id=\"ue1c144e8\" id=\"ue1c144e8\">​</span><br></p><p data-lake-id=\"u902ccf26\" id=\"u902ccf26\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2022%2Fgif%2F328252%2F1650696869692-388174e2-e8ef-4854-92f5-4c39eeac6988.gif%22%2C%22taskId%22%3A%22u03fd31a5-cd47-42d4-b6e0-78a1a0883bb%22%2C%22clientId%22%3A%22ucec67e16-1406-4%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%221052.%20%E7%88%B1%E7%94%9F%E6%B0%94%E7%9A%84%E4%B9%A6%E5%BA%97%E8%80%81%E6%9D%BF.gif%22%2C%22size%22%3A28885%2C%22from%22%3A%22ui%22%2C%22originWidth%22%3A480%2C%22originHeight%22%3A270%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22CUSTOMER%20GRUMPY%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A75.543816%2C%22y%22%3A114.68539%2C%22width%22%3A53.081474%2C%22height%22%3A9.930859999999996%2C%22text%22%3A%22CUSTOMER%22%7D%2C%7B%22x%22%3A75.55516%2C%22y%22%3A156.7051%2C%22width%22%3A44.70988%2C%22height%22%3A12.460020000000014%2C%22text%22%3A%22GRUMPY%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22id%22%3A%22ud0aac056%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><h3 data-lake-id=\"u0VRp\" id=\"u0VRp\"><span data-lake-id=\"u77884673\" id=\"u77884673\">参考代码</span></h3><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22python%22%2C%22code%22%3A%22class%20Solution%3A%5Cn%20%20%20%20def%20maxSatisfied(self%2C%20customers%3A%20List%5Bint%5D%2C%20grumpy%3A%20List%5Bint%5D%2C%20minutes%3A%20int)%20-%3E%20int%3A%5Cn%20%20%20%20%20%20%20%20n%20%3D%20len(customers)%5Cn%20%20%20%20%20%20%20%20total%20%3D%200%5Cn%20%20%20%20%20%20%20%20for%20i%20in%20range(0%2Cn)%3A%5Cn%20%20%20%20%20%20%20%20%20%20%20%20if%20grumpy%5Bi%5D%20%3D%3D%200%3A%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20total%20%2B%3D%20customers%5Bi%5D%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%8A%8A%E4%B8%8D%E5%BD%B1%E5%93%8D%E7%BB%93%E6%9E%9C%E7%9A%84%E7%BD%AE%E4%B8%BA0%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20customers%5Bi%5D%20%3D%200%5Cn%20%20%20%20%20%20%20%20increase%20%3D%200%5Cn%20%20%20%20%20%20%20%20for%20i%20in%20range(0%2Cminutes)%3A%5Cn%20%20%20%20%20%20%20%20%20%20%20%20increase%20%2B%3D%20customers%5Bi%5D%5Cn%20%20%20%20%20%20%20%20max_increase%20%3D%20increase%5Cn%20%20%20%20%20%20%20%20for%20i%20in%20range(minutes%2Cn)%3A%5Cn%20%20%20%20%20%20%20%20%20%20%20%20increase%20%3D%20increase%20%2B%20customers%5Bi%5D%20-%20customers%5Bi%20-%20minutes%5D%5Cn%20%20%20%20%20%20%20%20%20%20%20%20max_increase%20%3D%20max(max_increase%2Cincrease)%5Cn%20%20%20%20%20%20%20%20return%20total%20%2B%20max_increase%5Cn%20%20%20%20%20%20%20%20%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22dL7rI%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"dPrBw\" id=\"dPrBw\"><span data-lake-id=\"u83cf2c57\" id=\"u83cf2c57\">复杂度分析</span></h3><p data-lake-id=\"u37562ff2\" id=\"u37562ff2\"><span data-lake-id=\"ue85794fd\" id=\"ue85794fd\">时间复杂度O(n) 遍历了两边数组</span></p><p data-lake-id=\"u576e4cee\" id=\"u576e4cee\"><span data-lake-id=\"u1f37c1db\" id=\"u1f37c1db\">空间复杂度O(1)</span></p>",
    "public": 1,
    "status": 1,
    "view_status": 0,
    "read_status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2022-04-23T13:10:07.000Z",
    "deleted_at": null,
    "created_at": "2022-04-22T14:03:00.000Z",
    "updated_at": "2022-04-23T13:10:07.000Z",
    "published_at": "2022-04-23T13:10:07.000Z",
    "first_published_at": "2022-04-23T06:51:56.228Z",
    "word_count": 256,
    "cover": "https://cdn.nlark.com/yuque/0/2022/gif/328252/1650696869692-388174e2-e8ef-4854-92f5-4c39eeac6988.gif",
    "description": "滑动窗口方法一滑动窗口解题思路当书店老板不生气的时候，顾客满意度是固定的。所以生气的时候可以改变的满意度影响着最后的结果，所以这个题就转变成了求最大的可以改变的满意度。首先遍历一边customers计算出不受影响的满意顾客数的合。并且把这些customer置为0。然后使用滑动窗口计算最大的增长...",
    "custom_description": null,
    "hits": 0,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 74564274,
    "slug": "pxvdd6",
    "title": "643.子数组最大平均数I",
    "book_id": 27055002,
    "book": {
      "id": 27055002,
      "type": "Book",
      "slug": "leetcode",
      "name": "leetcode",
      "user_id": 328252,
      "description": "",
      "creator_id": 328252,
      "public": 1,
      "items_count": 2,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2022-04-23T13:10:06.640Z",
      "updated_at": "2022-04-23T13:10:07.000Z",
      "created_at": "2022-04-23T06:49:14.000Z",
      "namespace": "lmikoto/leetcode",
      "user": {
        "id": 328252,
        "type": "User",
        "login": "lmikoto",
        "name": "lmikoto",
        "description": null,
        "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/328252/1578028416108-avatar/38f12fe6-da0d-471e-819c-7131fadbd750.png",
        "books_count": 16,
        "public_books_count": 2,
        "followers_count": 0,
        "following_count": 0,
        "created_at": "2019-04-25T04:31:29.000Z",
        "updated_at": "2022-04-23T06:50:32.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 328252,
    "creator": {
      "id": 328252,
      "type": "User",
      "login": "lmikoto",
      "name": "lmikoto",
      "description": null,
      "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/328252/1578028416108-avatar/38f12fe6-da0d-471e-819c-7131fadbd750.png",
      "books_count": 16,
      "public_books_count": 2,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2019-04-25T04:31:29.000Z",
      "updated_at": "2022-04-23T06:50:32.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "> 滑动窗口\n\n<a name=\"EQeoI\"></a>\n## 方法一滑动窗口\n<a name=\"tblXh\"></a>\n### 解题思路\n这是一个比较典型的滑动窗口问题。<br />可以维护一个大小位k的滑动窗口，依次遍历，每次去掉末尾的元素添加当前遍历的元素\n\n![643. 子数组最大平均数 I.gif](https://cdn.nlark.com/yuque/0/2022/gif/328252/1650636304759-4e673da6-e98d-4cad-b211-fc8676eeb75d.gif#clientId=ud4e9c550-25e6-4&crop=0&crop=0&crop=1&crop=1&from=ui&id=u0de30a22&margin=%5Bobject%20Object%5D&name=643.%20%E5%AD%90%E6%95%B0%E7%BB%84%E6%9C%80%E5%A4%A7%E5%B9%B3%E5%9D%87%E6%95%B0%20I.gif&originHeight=270&originWidth=480&originalType=binary&ratio=1&rotation=0&showTitle=false&size=17885&status=done&style=none&taskId=uf7468eca-9136-4bc4-beb0-ee22d39ccf0&title=)\n<a name=\"TFIEm\"></a>\n### 参考代码\n```python\nclass Solution:\n    def findMaxAverage(self, nums: List[int], k: int) -> float:\n        total = 0\n        for i in range(0,k):\n            total += nums[i]\n        max_total = total\n        for i in range(k, len(nums)):\n            total = total + nums[i] - nums[i - k]\n            max_total = max(total,max_total)\n        return max_total / k\n```\n<a name=\"Oeprl\"></a>\n### 复杂度分析\n时间复杂度 O(n)<br />空间复杂度 O(1)\n",
    "body_draft": "> 滑动窗口\n\n<a name=\"EQeoI\"></a>\n## 方法一滑动窗口\n<a name=\"tblXh\"></a>\n### 解题思路\n这是一个比较典型的滑动窗口问题。<br />可以维护一个大小位k的滑动窗口，依次遍历，每次去掉末尾的元素添加当前遍历的元素\n\n![643. 子数组最大平均数 I.gif](https://cdn.nlark.com/yuque/0/2022/gif/328252/1650636304759-4e673da6-e98d-4cad-b211-fc8676eeb75d.gif#clientId=ud4e9c550-25e6-4&crop=0&crop=0&crop=1&crop=1&from=ui&id=u0de30a22&margin=%5Bobject%20Object%5D&name=643.%20%E5%AD%90%E6%95%B0%E7%BB%84%E6%9C%80%E5%A4%A7%E5%B9%B3%E5%9D%87%E6%95%B0%20I.gif&originHeight=270&originWidth=480&originalType=binary&ratio=1&rotation=0&showTitle=false&size=17885&status=done&style=none&taskId=uf7468eca-9136-4bc4-beb0-ee22d39ccf0&title=)\n<a name=\"TFIEm\"></a>\n### 参考代码\n```python\nclass Solution:\n    def findMaxAverage(self, nums: List[int], k: int) -> float:\n        total = 0\n        for i in range(0,k):\n            total += nums[i]\n        max_total = total\n        for i in range(k, len(nums)):\n            total = total + nums[i] - nums[i - k]\n            max_total = max(total,max_total)\n        return max_total / k\n```\n<a name=\"Oeprl\"></a>\n### 复杂度分析\n时间复杂度 O(n)<br />空间复杂度 O(1)\n",
    "body_html": "<!doctype html><div class=\"lake-content\" typography=\"classic\"><div class=\"ne-quote\"><p id=\"u05c127a5\" class=\"ne-p\"><span class=\"ne-text\">滑动窗口</span></p></div><h2 id=\"EQeoI\"><span class=\"ne-text\">方法一滑动窗口</span></h2><h3 id=\"tblXh\"><span class=\"ne-text\">解题思路</span></h3><p id=\"u3146a6e0\" class=\"ne-p\"><span class=\"ne-text\">这是一个比较典型的滑动窗口问题。</span></p><p id=\"u0827dc4d\" class=\"ne-p\"><span class=\"ne-text\">可以维护一个大小位k的滑动窗口，依次遍历，每次去掉末尾的元素添加当前遍历的元素</span></p><p id=\"u6fe27fbb\" class=\"ne-p\"><br></p><p id=\"u2d182dee\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2022/gif/328252/1650636304759-4e673da6-e98d-4cad-b211-fc8676eeb75d.gif\" width=\"480\" id=\"u0de30a22\" class=\"ne-image\"></p><h3 id=\"TFIEm\"><span class=\"ne-text\">参考代码</span></h3><pre data-language=\"python\" id=\"ooIEY\" class=\"ne-codeblock language-python\">class Solution:\n    def findMaxAverage(self, nums: List[int], k: int) -&gt; float:\n        total = 0\n        for i in range(0,k):\n            total += nums[i]\n        max_total = total\n        for i in range(k, len(nums)):\n            total = total + nums[i] - nums[i - k]\n            max_total = max(total,max_total)\n        return max_total / k</pre><h3 id=\"Oeprl\"><span class=\"ne-text\">复杂度分析</span></h3><p id=\"u115e4c02\" class=\"ne-p\"><span class=\"ne-text\">时间复杂度 O(n)</span></p><p id=\"ubc7155d5\" class=\"ne-p\"><span class=\"ne-text\">空间复杂度 O(1)</span></p></div>",
    "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"fixed\" /><blockquote data-lake-id=\"u3263b309\" id=\"u3263b309\"><p data-lake-id=\"u05c127a5\" id=\"u05c127a5\"><span data-lake-id=\"u3b8b4c3d\" id=\"u3b8b4c3d\">滑动窗口</span></p></blockquote><h2 data-lake-id=\"EQeoI\" id=\"EQeoI\"><span data-lake-id=\"u97d053d2\" id=\"u97d053d2\">方法一滑动窗口</span></h2><h3 data-lake-id=\"tblXh\" id=\"tblXh\"><span data-lake-id=\"u98eeb552\" id=\"u98eeb552\">解题思路</span></h3><p data-lake-id=\"u3146a6e0\" id=\"u3146a6e0\"><span data-lake-id=\"ue28218c9\" id=\"ue28218c9\">这是一个比较典型的滑动窗口问题。</span></p><p data-lake-id=\"u0827dc4d\" id=\"u0827dc4d\"><span data-lake-id=\"uf4cc85e3\" id=\"uf4cc85e3\">可以维护一个大小位k的滑动窗口，依次遍历，每次去掉末尾的元素添加当前遍历的元素</span></p><p data-lake-id=\"u6fe27fbb\" id=\"u6fe27fbb\"><br></p><p data-lake-id=\"u2d182dee\" id=\"u2d182dee\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2022%2Fgif%2F328252%2F1650636304759-4e673da6-e98d-4cad-b211-fc8676eeb75d.gif%22%2C%22taskId%22%3A%22uf7468eca-9136-4bc4-beb0-ee22d39ccf0%22%2C%22clientId%22%3A%22ud4e9c550-25e6-4%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22643.%20%E5%AD%90%E6%95%B0%E7%BB%84%E6%9C%80%E5%A4%A7%E5%B9%B3%E5%9D%87%E6%95%B0%20I.gif%22%2C%22size%22%3A17885%2C%22from%22%3A%22ui%22%2C%22originWidth%22%3A480%2C%22originHeight%22%3A270%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22K4%2050%2012%2020%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A239.42851%2C%22y%22%3A56.216763%2C%22width%22%3A29.834430000000026%2C%22height%22%3A11.396567000000005%2C%22text%22%3A%22K4%22%7D%2C%7B%22x%22%3A249.56073%2C%22y%22%3A124.50476%2C%22width%22%3A10.72299000000001%2C%22height%22%3A10.828569999999985%2C%22text%22%3A%2250%22%7D%2C%7B%22x%22%3A163.56386%2C%22y%22%3A125.10724%2C%22width%22%3A10.044309999999996%2C%22height%22%3A10.072559999999996%2C%22text%22%3A%2212%22%7D%2C%7B%22x%22%3A335.9877%2C%22y%22%3A125.441%2C%22width%22%3A11.863129999999956%2C%22height%22%3A8.591639999999984%2C%22text%22%3A%2220%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22id%22%3A%22u0de30a22%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><h3 data-lake-id=\"TFIEm\" id=\"TFIEm\"><span data-lake-id=\"u79d097c5\" id=\"u79d097c5\">参考代码</span></h3><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22python%22%2C%22code%22%3A%22class%20Solution%3A%5Cn%20%20%20%20def%20findMaxAverage(self%2C%20nums%3A%20List%5Bint%5D%2C%20k%3A%20int)%20-%3E%20float%3A%5Cn%20%20%20%20%20%20%20%20total%20%3D%200%5Cn%20%20%20%20%20%20%20%20for%20i%20in%20range(0%2Ck)%3A%5Cn%20%20%20%20%20%20%20%20%20%20%20%20total%20%2B%3D%20nums%5Bi%5D%5Cn%20%20%20%20%20%20%20%20max_total%20%3D%20total%5Cn%20%20%20%20%20%20%20%20for%20i%20in%20range(k%2C%20len(nums))%3A%5Cn%20%20%20%20%20%20%20%20%20%20%20%20total%20%3D%20total%20%2B%20nums%5Bi%5D%20-%20nums%5Bi%20-%20k%5D%5Cn%20%20%20%20%20%20%20%20%20%20%20%20max_total%20%3D%20max(total%2Cmax_total)%5Cn%20%20%20%20%20%20%20%20return%20max_total%20%2F%20k%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22ooIEY%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"Oeprl\" id=\"Oeprl\"><span data-lake-id=\"u83cf2c57\" id=\"u83cf2c57\">复杂度分析</span></h3><p data-lake-id=\"u115e4c02\" id=\"u115e4c02\"><span data-lake-id=\"u4c4157b2\" id=\"u4c4157b2\">时间复杂度 O(n)</span></p><p data-lake-id=\"ubc7155d5\" id=\"ubc7155d5\"><span data-lake-id=\"ub5cebf90\" id=\"ub5cebf90\">空间复杂度 O(1)</span></p>",
    "body_draft_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"fixed\" /><blockquote data-lake-id=\"u3263b309\" id=\"u3263b309\"><p data-lake-id=\"u05c127a5\" id=\"u05c127a5\"><span data-lake-id=\"u3b8b4c3d\" id=\"u3b8b4c3d\">滑动窗口</span></p></blockquote><h2 data-lake-id=\"EQeoI\" id=\"EQeoI\"><span data-lake-id=\"u97d053d2\" id=\"u97d053d2\">方法一滑动窗口</span></h2><h3 data-lake-id=\"tblXh\" id=\"tblXh\"><span data-lake-id=\"u98eeb552\" id=\"u98eeb552\">解题思路</span></h3><p data-lake-id=\"u3146a6e0\" id=\"u3146a6e0\"><span data-lake-id=\"ue28218c9\" id=\"ue28218c9\">这是一个比较典型的滑动窗口问题。</span></p><p data-lake-id=\"u0827dc4d\" id=\"u0827dc4d\"><span data-lake-id=\"uf4cc85e3\" id=\"uf4cc85e3\">可以维护一个大小位k的滑动窗口，依次遍历，每次去掉末尾的元素添加当前遍历的元素</span></p><p data-lake-id=\"u6fe27fbb\" id=\"u6fe27fbb\"><br></p><p data-lake-id=\"u2d182dee\" id=\"u2d182dee\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2022%2Fgif%2F328252%2F1650636304759-4e673da6-e98d-4cad-b211-fc8676eeb75d.gif%22%2C%22taskId%22%3A%22uf7468eca-9136-4bc4-beb0-ee22d39ccf0%22%2C%22clientId%22%3A%22ud4e9c550-25e6-4%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22643.%20%E5%AD%90%E6%95%B0%E7%BB%84%E6%9C%80%E5%A4%A7%E5%B9%B3%E5%9D%87%E6%95%B0%20I.gif%22%2C%22size%22%3A17885%2C%22from%22%3A%22ui%22%2C%22originWidth%22%3A480%2C%22originHeight%22%3A270%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22K4%2050%2012%2020%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A239.42851%2C%22y%22%3A56.216763%2C%22width%22%3A29.834430000000026%2C%22height%22%3A11.396567000000005%2C%22text%22%3A%22K4%22%7D%2C%7B%22x%22%3A249.56073%2C%22y%22%3A124.50476%2C%22width%22%3A10.72299000000001%2C%22height%22%3A10.828569999999985%2C%22text%22%3A%2250%22%7D%2C%7B%22x%22%3A163.56386%2C%22y%22%3A125.10724%2C%22width%22%3A10.044309999999996%2C%22height%22%3A10.072559999999996%2C%22text%22%3A%2212%22%7D%2C%7B%22x%22%3A335.9877%2C%22y%22%3A125.441%2C%22width%22%3A11.863129999999956%2C%22height%22%3A8.591639999999984%2C%22text%22%3A%2220%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22id%22%3A%22u0de30a22%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><h3 data-lake-id=\"TFIEm\" id=\"TFIEm\"><span data-lake-id=\"u79d097c5\" id=\"u79d097c5\">参考代码</span></h3><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22python%22%2C%22code%22%3A%22class%20Solution%3A%5Cn%20%20%20%20def%20findMaxAverage(self%2C%20nums%3A%20List%5Bint%5D%2C%20k%3A%20int)%20-%3E%20float%3A%5Cn%20%20%20%20%20%20%20%20total%20%3D%200%5Cn%20%20%20%20%20%20%20%20for%20i%20in%20range(0%2Ck)%3A%5Cn%20%20%20%20%20%20%20%20%20%20%20%20total%20%2B%3D%20nums%5Bi%5D%5Cn%20%20%20%20%20%20%20%20max_total%20%3D%20total%5Cn%20%20%20%20%20%20%20%20for%20i%20in%20range(k%2C%20len(nums))%3A%5Cn%20%20%20%20%20%20%20%20%20%20%20%20total%20%3D%20total%20%2B%20nums%5Bi%5D%20-%20nums%5Bi%20-%20k%5D%5Cn%20%20%20%20%20%20%20%20%20%20%20%20max_total%20%3D%20max(total%2Cmax_total)%5Cn%20%20%20%20%20%20%20%20return%20max_total%20%2F%20k%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22ooIEY%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"Oeprl\" id=\"Oeprl\"><span data-lake-id=\"u83cf2c57\" id=\"u83cf2c57\">复杂度分析</span></h3><p data-lake-id=\"u115e4c02\" id=\"u115e4c02\"><span data-lake-id=\"u4c4157b2\" id=\"u4c4157b2\">时间复杂度 O(n)</span></p><p data-lake-id=\"ubc7155d5\" id=\"ubc7155d5\"><span data-lake-id=\"ub5cebf90\" id=\"ub5cebf90\">空间复杂度 O(1)</span></p>",
    "public": 1,
    "status": 1,
    "view_status": 0,
    "read_status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2022-04-23T13:10:02.000Z",
    "deleted_at": null,
    "created_at": "2022-04-22T02:31:53.000Z",
    "updated_at": "2022-04-23T13:10:02.000Z",
    "published_at": "2022-04-23T13:10:02.000Z",
    "first_published_at": "2022-04-23T06:52:23.070Z",
    "word_count": 135,
    "cover": "https://cdn.nlark.com/yuque/0/2022/gif/328252/1650636304759-4e673da6-e98d-4cad-b211-fc8676eeb75d.gif",
    "description": "滑动窗口方法一滑动窗口解题思路这是一个比较典型的滑动窗口问题。可以维护一个大小位k的滑动窗口，依次遍历，每次去掉末尾的元素添加当前遍历的元素参考代码class Solution:     def findMaxAverage(self, nums: List[int], k: int) -> ...",
    "custom_description": null,
    "hits": 0,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 74816135,
    "slug": "no8t2b",
    "title": "868.二进制间距",
    "book_id": 27055002,
    "book": {
      "id": 27055002,
      "type": "Book",
      "slug": "leetcode",
      "name": "leetcode",
      "user_id": 328252,
      "description": "",
      "creator_id": 328252,
      "public": 1,
      "items_count": 3,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2022-04-24T06:00:57.260Z",
      "updated_at": "2022-04-24T06:00:57.000Z",
      "created_at": "2022-04-23T06:49:14.000Z",
      "namespace": "lmikoto/leetcode",
      "user": {
        "id": 328252,
        "type": "User",
        "login": "lmikoto",
        "name": "lmikoto",
        "description": null,
        "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/328252/1578028416108-avatar/38f12fe6-da0d-471e-819c-7131fadbd750.png",
        "books_count": 16,
        "public_books_count": 2,
        "followers_count": 0,
        "following_count": 0,
        "created_at": "2019-04-25T04:31:29.000Z",
        "updated_at": "2022-04-24T05:43:59.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 328252,
    "creator": {
      "id": 328252,
      "type": "User",
      "login": "lmikoto",
      "name": "lmikoto",
      "description": null,
      "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/328252/1578028416108-avatar/38f12fe6-da0d-471e-819c-7131fadbd750.png",
      "books_count": 16,
      "public_books_count": 2,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2019-04-25T04:31:29.000Z",
      "updated_at": "2022-04-24T05:43:59.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "> 位运算\n\n<a name=\"CwLcz\"></a>\n## 方法一 位运算\n<a name=\"RY7yo\"></a>\n### 解题思路\n这是一个简单的位运算模拟题根据题意模拟即可。<br />使用`x & 1`可以判断二进制最后一位是否为1\n```python\nclass Solution:\n    def binaryGap(self, n: int) -> int:\n        last,i,ans = -1,0,0\n        while n:\n            if n & 1:\n                if last != -1:\n                    ans = max(ans,i - last)\n                last = i\n            i += 1\n            n =  n >> 1\n        return ans\n\n```\n<a name=\"oQGPc\"></a>\n### 复杂度分析\n时间复杂度：O(logn)  循环中的每一步 n会减少一半<br />空间复杂度：O(1)\n",
    "body_draft": "> 位运算\n\n<a name=\"CwLcz\"></a>\n## 方法一 位运算\n<a name=\"RY7yo\"></a>\n### 解题思路\n这是一个简单的位运算模拟题根据题意模拟即可。<br />使用`x & 1`可以判断二进制最后一位是否为1\n```python\nclass Solution:\n    def binaryGap(self, n: int) -> int:\n        last,i,ans = -1,0,0\n        while n:\n            if n & 1:\n                if last != -1:\n                    ans = max(ans,i - last)\n                last = i\n            i += 1\n            n =  n >> 1\n        return ans\n\n```\n<a name=\"oQGPc\"></a>\n### 复杂度分析\n时间复杂度：O(logn)  循环中的每一步 n会减少一半<br />空间复杂度：O(1)\n",
    "body_html": "<!doctype html><div class=\"lake-content\" typography=\"classic\"><div class=\"ne-quote\"><p id=\"u5e153b33\" class=\"ne-p\"><span class=\"ne-text\">位运算</span></p></div><h2 id=\"CwLcz\"><span class=\"ne-text\">方法一 位运算</span></h2><h3 id=\"RY7yo\"><span class=\"ne-text\">解题思路</span></h3><p id=\"ufa5b4ab0\" class=\"ne-p\"><span class=\"ne-text\">这是一个简单的位运算模拟题根据题意模拟即可。</span></p><p id=\"u69a2a9dd\" class=\"ne-p\"><span class=\"ne-text\">使用</span><code class=\"ne-code\"><span class=\"ne-text\">x &amp; 1</span></code><span class=\"ne-text\">可以判断二进制最后一位是否为1</span></p><pre data-language=\"python\" id=\"HUT3t\" class=\"ne-codeblock language-python\">class Solution:\n    def binaryGap(self, n: int) -&gt; int:\n        last,i,ans = -1,0,0\n        while n:\n            if n &amp; 1:\n                if last != -1:\n                    ans = max(ans,i - last)\n                last = i\n            i += 1\n            n =  n &gt;&gt; 1\n        return ans\n</pre><h3 id=\"oQGPc\"><span class=\"ne-text\">复杂度分析</span></h3><p id=\"u8462b061\" class=\"ne-p\"><span class=\"ne-text\">时间复杂度：O(logn)  循环中的每一步 n会减少一半</span></p><p id=\"ubdcb4732\" class=\"ne-p\"><span class=\"ne-text\">空间复杂度：O(1)</span></p></div>",
    "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"fixed\" /><blockquote data-lake-id=\"ua6f255de\" id=\"ua6f255de\"><p data-lake-id=\"u5e153b33\" id=\"u5e153b33\"><span data-lake-id=\"ua9cb6d5d\" id=\"ua9cb6d5d\">位运算</span></p></blockquote><h2 data-lake-id=\"CwLcz\" id=\"CwLcz\"><span data-lake-id=\"u48597a39\" id=\"u48597a39\">方法一 位运算</span></h2><h3 data-lake-id=\"RY7yo\" id=\"RY7yo\"><span data-lake-id=\"u05765438\" id=\"u05765438\">解题思路</span></h3><p data-lake-id=\"ufa5b4ab0\" id=\"ufa5b4ab0\"><span data-lake-id=\"ud9347a63\" id=\"ud9347a63\">这是一个简单的位运算模拟题根据题意模拟即可。</span></p><p data-lake-id=\"u69a2a9dd\" id=\"u69a2a9dd\"><span data-lake-id=\"u93dd7848\" id=\"u93dd7848\">使用</span><code data-lake-id=\"ud7ccb090\" id=\"ud7ccb090\"><span data-lake-id=\"uf8fbcce7\" id=\"uf8fbcce7\">x &amp; 1</span></code><span data-lake-id=\"u31bd0ee3\" id=\"u31bd0ee3\">可以判断二进制最后一位是否为1</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22python%22%2C%22code%22%3A%22class%20Solution%3A%5Cn%20%20%20%20def%20binaryGap(self%2C%20n%3A%20int)%20-%3E%20int%3A%5Cn%20%20%20%20%20%20%20%20last%2Ci%2Cans%20%3D%20-1%2C0%2C0%5Cn%20%20%20%20%20%20%20%20while%20n%3A%5Cn%20%20%20%20%20%20%20%20%20%20%20%20if%20n%20%26%201%3A%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20last%20!%3D%20-1%3A%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20ans%20%3D%20max(ans%2Ci%20-%20last)%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20last%20%3D%20i%5Cn%20%20%20%20%20%20%20%20%20%20%20%20i%20%2B%3D%201%5Cn%20%20%20%20%20%20%20%20%20%20%20%20n%20%3D%20%20n%20%3E%3E%201%5Cn%20%20%20%20%20%20%20%20return%20ans%5Cn%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22HUT3t%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"oQGPc\" id=\"oQGPc\"><span data-lake-id=\"udf356234\" id=\"udf356234\">复杂度分析</span></h3><p data-lake-id=\"u8462b061\" id=\"u8462b061\"><span data-lake-id=\"u4d5d1efa\" id=\"u4d5d1efa\">时间复杂度：O(logn)  循环中的每一步 n会减少一半</span></p><p data-lake-id=\"ubdcb4732\" id=\"ubdcb4732\"><span data-lake-id=\"u02f30d95\" id=\"u02f30d95\">空间复杂度：O(1)</span></p>",
    "body_draft_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"fixed\" /><blockquote data-lake-id=\"ua6f255de\" id=\"ua6f255de\"><p data-lake-id=\"u5e153b33\" id=\"u5e153b33\"><span data-lake-id=\"ua9cb6d5d\" id=\"ua9cb6d5d\">位运算</span></p></blockquote><h2 data-lake-id=\"CwLcz\" id=\"CwLcz\"><span data-lake-id=\"u48597a39\" id=\"u48597a39\">方法一 位运算</span></h2><h3 data-lake-id=\"RY7yo\" id=\"RY7yo\"><span data-lake-id=\"u05765438\" id=\"u05765438\">解题思路</span></h3><p data-lake-id=\"ufa5b4ab0\" id=\"ufa5b4ab0\"><span data-lake-id=\"ud9347a63\" id=\"ud9347a63\">这是一个简单的位运算模拟题根据题意模拟即可。</span></p><p data-lake-id=\"u69a2a9dd\" id=\"u69a2a9dd\"><span data-lake-id=\"u93dd7848\" id=\"u93dd7848\">使用</span><code data-lake-id=\"ud7ccb090\" id=\"ud7ccb090\"><span data-lake-id=\"uf8fbcce7\" id=\"uf8fbcce7\">x &amp; 1</span></code><span data-lake-id=\"u31bd0ee3\" id=\"u31bd0ee3\">可以判断二进制最后一位是否为1</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22python%22%2C%22code%22%3A%22class%20Solution%3A%5Cn%20%20%20%20def%20binaryGap(self%2C%20n%3A%20int)%20-%3E%20int%3A%5Cn%20%20%20%20%20%20%20%20last%2Ci%2Cans%20%3D%20-1%2C0%2C0%5Cn%20%20%20%20%20%20%20%20while%20n%3A%5Cn%20%20%20%20%20%20%20%20%20%20%20%20if%20n%20%26%201%3A%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20last%20!%3D%20-1%3A%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20ans%20%3D%20max(ans%2Ci%20-%20last)%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20last%20%3D%20i%5Cn%20%20%20%20%20%20%20%20%20%20%20%20i%20%2B%3D%201%5Cn%20%20%20%20%20%20%20%20%20%20%20%20n%20%3D%20%20n%20%3E%3E%201%5Cn%20%20%20%20%20%20%20%20return%20ans%5Cn%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22HUT3t%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"oQGPc\" id=\"oQGPc\"><span data-lake-id=\"udf356234\" id=\"udf356234\">复杂度分析</span></h3><p data-lake-id=\"u8462b061\" id=\"u8462b061\"><span data-lake-id=\"u4d5d1efa\" id=\"u4d5d1efa\">时间复杂度：O(logn)  循环中的每一步 n会减少一半</span></p><p data-lake-id=\"ubdcb4732\" id=\"ubdcb4732\"><span data-lake-id=\"u02f30d95\" id=\"u02f30d95\">空间复杂度：O(1)</span></p>",
    "public": 1,
    "status": 1,
    "view_status": 0,
    "read_status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2022-04-24T06:00:57.000Z",
    "deleted_at": null,
    "created_at": "2022-04-24T05:43:59.000Z",
    "updated_at": "2022-04-24T06:00:57.000Z",
    "published_at": "2022-04-24T06:00:57.000Z",
    "first_published_at": "2022-04-24T05:56:23.004Z",
    "word_count": 126,
    "cover": null,
    "description": "位运算方法一 位运算解题思路这是一个简单的位运算模拟题根据题意模拟即可。使用x & 1可以判断二进制最后一位是否为1class Solution:     def binaryGap(self, n: int) -> int:         last,i,ans = -1,0,0      ...",
    "custom_description": null,
    "hits": 0,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 74823034,
    "slug": "opveky",
    "title": "1423.可获得的最大点数",
    "book_id": 27055002,
    "book": {
      "id": 27055002,
      "type": "Book",
      "slug": "leetcode",
      "name": "leetcode",
      "user_id": 328252,
      "description": "",
      "creator_id": 328252,
      "public": 1,
      "items_count": 4,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2022-04-24T06:26:55.645Z",
      "updated_at": "2022-04-24T06:26:56.000Z",
      "created_at": "2022-04-23T06:49:14.000Z",
      "namespace": "lmikoto/leetcode",
      "user": {
        "id": 328252,
        "type": "User",
        "login": "lmikoto",
        "name": "lmikoto",
        "description": null,
        "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/328252/1578028416108-avatar/38f12fe6-da0d-471e-819c-7131fadbd750.png",
        "books_count": 16,
        "public_books_count": 2,
        "followers_count": 0,
        "following_count": 0,
        "created_at": "2019-04-25T04:31:29.000Z",
        "updated_at": "2022-04-24T06:22:02.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 328252,
    "creator": {
      "id": 328252,
      "type": "User",
      "login": "lmikoto",
      "name": "lmikoto",
      "description": null,
      "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/328252/1578028416108-avatar/38f12fe6-da0d-471e-819c-7131fadbd750.png",
      "books_count": 16,
      "public_books_count": 2,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2019-04-25T04:31:29.000Z",
      "updated_at": "2022-04-24T06:22:02.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "> 滑动窗口\n\n<a name=\"h6pq7\"></a>\n## 方法一滑动窗口\n这个题比较有意思，滑动窗口不让直接滑，而是换了一种说法。但是题意的等价说法就是求数组中连的最小和。\n<a name=\"c2WOJ\"></a>\n### 参考代码\n```python\nclass Solution:\n    def maxScore(self, cardPoints: List[int], k: int) -> int:\n        n = len(cardPoints) - k\n        rest = sum(cardPoints[:n])\n        min_rest = rest\n        for i in range(n,len(cardPoints)):\n            rest = rest + cardPoints[i] - cardPoints[i - n]\n            min_rest = min(rest,min_rest)\n        return sum(cardPoints) - min_rest\n\n```\n<a name=\"cTbmG\"></a>\n### 复杂度分析\n时间复杂度 O(n) 遍历了两遍数组<br />空间复杂度 O(1)\n",
    "body_draft": "> 滑动窗口\n\n<a name=\"h6pq7\"></a>\n## 方法一滑动窗口\n这个题比较有意思，滑动窗口不让直接滑，而是换了一种说法。但是题意的等价说法就是求数组中连的最小和。\n<a name=\"c2WOJ\"></a>\n### 参考代码\n```python\nclass Solution:\n    def maxScore(self, cardPoints: List[int], k: int) -> int:\n        n = len(cardPoints) - k\n        rest = sum(cardPoints[:n])\n        min_rest = rest\n        for i in range(n,len(cardPoints)):\n            rest = rest + cardPoints[i] - cardPoints[i - n]\n            min_rest = min(rest,min_rest)\n        return sum(cardPoints) - min_rest\n\n```\n<a name=\"cTbmG\"></a>\n### 复杂度分析\n时间复杂度 O(n) 遍历了两遍数组<br />空间复杂度 O(1)\n",
    "body_html": "<!doctype html><div class=\"lake-content\" typography=\"classic\"><div class=\"ne-quote\"><p id=\"uf830a530\" class=\"ne-p\"><span class=\"ne-text\">滑动窗口</span></p></div><h2 id=\"h6pq7\"><span class=\"ne-text\">方法一滑动窗口</span></h2><p id=\"u5ec37454\" class=\"ne-p\"><span class=\"ne-text\">这个题比较有意思，滑动窗口不让直接滑，而是换了一种说法。但是题意的等价说法就是求数组中连的最小和。</span></p><h3 id=\"c2WOJ\"><span class=\"ne-text\">参考代码</span></h3><pre data-language=\"python\" id=\"G3l8X\" class=\"ne-codeblock language-python\">class Solution:\n    def maxScore(self, cardPoints: List[int], k: int) -&gt; int:\n        n = len(cardPoints) - k\n        rest = sum(cardPoints[:n])\n        min_rest = rest\n        for i in range(n,len(cardPoints)):\n            rest = rest + cardPoints[i] - cardPoints[i - n]\n            min_rest = min(rest,min_rest)\n        return sum(cardPoints) - min_rest\n</pre><h3 id=\"cTbmG\"><span class=\"ne-text\">复杂度分析</span></h3><p id=\"ue2202bcb\" class=\"ne-p\"><span class=\"ne-text\">时间复杂度 O(n) 遍历了两遍数组</span></p><p id=\"u0d96643a\" class=\"ne-p\"><span class=\"ne-text\">空间复杂度 O(1)</span></p></div>",
    "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"fixed\" /><blockquote data-lake-id=\"u0e74fa30\" id=\"u0e74fa30\"><p data-lake-id=\"uf830a530\" id=\"uf830a530\"><span data-lake-id=\"u75cc8eb1\" id=\"u75cc8eb1\">滑动窗口</span></p></blockquote><h2 data-lake-id=\"h6pq7\" id=\"h6pq7\"><span data-lake-id=\"uddfb2ab6\" id=\"uddfb2ab6\">方法一滑动窗口</span></h2><p data-lake-id=\"u5ec37454\" id=\"u5ec37454\"><span data-lake-id=\"u75932cb6\" id=\"u75932cb6\">这个题比较有意思，滑动窗口不让直接滑，而是换了一种说法。但是题意的等价说法就是求数组中连的最小和。</span></p><h3 data-lake-id=\"c2WOJ\" id=\"c2WOJ\"><span data-lake-id=\"ueef7ef1f\" id=\"ueef7ef1f\">参考代码</span></h3><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22python%22%2C%22code%22%3A%22class%20Solution%3A%5Cn%20%20%20%20def%20maxScore(self%2C%20cardPoints%3A%20List%5Bint%5D%2C%20k%3A%20int)%20-%3E%20int%3A%5Cn%20%20%20%20%20%20%20%20n%20%3D%20len(cardPoints)%20-%20k%5Cn%20%20%20%20%20%20%20%20rest%20%3D%20sum(cardPoints%5B%3An%5D)%5Cn%20%20%20%20%20%20%20%20min_rest%20%3D%20rest%5Cn%20%20%20%20%20%20%20%20for%20i%20in%20range(n%2Clen(cardPoints))%3A%5Cn%20%20%20%20%20%20%20%20%20%20%20%20rest%20%3D%20rest%20%2B%20cardPoints%5Bi%5D%20-%20cardPoints%5Bi%20-%20n%5D%5Cn%20%20%20%20%20%20%20%20%20%20%20%20min_rest%20%3D%20min(rest%2Cmin_rest)%5Cn%20%20%20%20%20%20%20%20return%20sum(cardPoints)%20-%20min_rest%5Cn%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22G3l8X%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"cTbmG\" id=\"cTbmG\"><span data-lake-id=\"u6b0e7469\" id=\"u6b0e7469\">复杂度分析</span></h3><p data-lake-id=\"ue2202bcb\" id=\"ue2202bcb\"><span data-lake-id=\"ubfb33d97\" id=\"ubfb33d97\">时间复杂度 O(n) 遍历了两遍数组</span></p><p data-lake-id=\"u0d96643a\" id=\"u0d96643a\"><span data-lake-id=\"u1768ff20\" id=\"u1768ff20\">空间复杂度 O(1)</span></p>",
    "body_draft_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"fixed\" /><blockquote data-lake-id=\"u0e74fa30\" id=\"u0e74fa30\"><p data-lake-id=\"uf830a530\" id=\"uf830a530\"><span data-lake-id=\"u75cc8eb1\" id=\"u75cc8eb1\">滑动窗口</span></p></blockquote><h2 data-lake-id=\"h6pq7\" id=\"h6pq7\"><span data-lake-id=\"uddfb2ab6\" id=\"uddfb2ab6\">方法一滑动窗口</span></h2><p data-lake-id=\"u5ec37454\" id=\"u5ec37454\"><span data-lake-id=\"u75932cb6\" id=\"u75932cb6\">这个题比较有意思，滑动窗口不让直接滑，而是换了一种说法。但是题意的等价说法就是求数组中连的最小和。</span></p><h3 data-lake-id=\"c2WOJ\" id=\"c2WOJ\"><span data-lake-id=\"ueef7ef1f\" id=\"ueef7ef1f\">参考代码</span></h3><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22python%22%2C%22code%22%3A%22class%20Solution%3A%5Cn%20%20%20%20def%20maxScore(self%2C%20cardPoints%3A%20List%5Bint%5D%2C%20k%3A%20int)%20-%3E%20int%3A%5Cn%20%20%20%20%20%20%20%20n%20%3D%20len(cardPoints)%20-%20k%5Cn%20%20%20%20%20%20%20%20rest%20%3D%20sum(cardPoints%5B%3An%5D)%5Cn%20%20%20%20%20%20%20%20min_rest%20%3D%20rest%5Cn%20%20%20%20%20%20%20%20for%20i%20in%20range(n%2Clen(cardPoints))%3A%5Cn%20%20%20%20%20%20%20%20%20%20%20%20rest%20%3D%20rest%20%2B%20cardPoints%5Bi%5D%20-%20cardPoints%5Bi%20-%20n%5D%5Cn%20%20%20%20%20%20%20%20%20%20%20%20min_rest%20%3D%20min(rest%2Cmin_rest)%5Cn%20%20%20%20%20%20%20%20return%20sum(cardPoints)%20-%20min_rest%5Cn%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22G3l8X%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"cTbmG\" id=\"cTbmG\"><span data-lake-id=\"u6b0e7469\" id=\"u6b0e7469\">复杂度分析</span></h3><p data-lake-id=\"ue2202bcb\" id=\"ue2202bcb\"><span data-lake-id=\"ubfb33d97\" id=\"ubfb33d97\">时间复杂度 O(n) 遍历了两遍数组</span></p><p data-lake-id=\"u0d96643a\" id=\"u0d96643a\"><span data-lake-id=\"u1768ff20\" id=\"u1768ff20\">空间复杂度 O(1)</span></p>",
    "public": 1,
    "status": 1,
    "view_status": 0,
    "read_status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2022-04-24T06:26:55.000Z",
    "deleted_at": null,
    "created_at": "2022-04-24T06:22:02.000Z",
    "updated_at": "2022-04-24T06:26:56.000Z",
    "published_at": "2022-04-24T06:26:55.000Z",
    "first_published_at": "2022-04-24T06:26:55.490Z",
    "word_count": 129,
    "cover": null,
    "description": "滑动窗口方法一滑动窗口这个题比较有意思，滑动窗口不让直接滑，而是换了一种说法。但是题意的等价说法就是求数组中连的最小和。参考代码class Solution:     def maxScore(self, cardPoints: List[int], k: int) -> int:      ...",
    "custom_description": null,
    "hits": 0,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 74828188,
    "slug": "zn8dg4",
    "title": "1.两数之和",
    "book_id": 27055002,
    "book": {
      "id": 27055002,
      "type": "Book",
      "slug": "leetcode",
      "name": "leetcode",
      "user_id": 328252,
      "description": "",
      "creator_id": 328252,
      "public": 1,
      "items_count": 6,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2022-04-24T11:45:16.394Z",
      "updated_at": "2022-04-24T11:45:16.000Z",
      "created_at": "2022-04-23T06:49:14.000Z",
      "namespace": "lmikoto/leetcode",
      "user": {
        "id": 328252,
        "type": "User",
        "login": "lmikoto",
        "name": "lmikoto",
        "description": null,
        "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/328252/1578028416108-avatar/38f12fe6-da0d-471e-819c-7131fadbd750.png",
        "books_count": 16,
        "public_books_count": 2,
        "followers_count": 0,
        "following_count": 0,
        "created_at": "2019-04-25T04:31:29.000Z",
        "updated_at": "2022-04-24T11:44:44.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 328252,
    "creator": {
      "id": 328252,
      "type": "User",
      "login": "lmikoto",
      "name": "lmikoto",
      "description": null,
      "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/328252/1578028416108-avatar/38f12fe6-da0d-471e-819c-7131fadbd750.png",
      "books_count": 16,
      "public_books_count": 2,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2019-04-25T04:31:29.000Z",
      "updated_at": "2022-04-24T11:44:44.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "> 哈希表\n\n<a name=\"kSiRo\"></a>\n## 方法一 哈希表\n建立一个哈希表key是数值，value是下标。遍历数组中的元素，若target - nums[i]在哈希表中，则直接返回。<br />若target - nums[i]不在哈希表中，则将这个元素放入哈希表。因为是先判断是否有符合的，再放入哈希表，因此也可以避免找到自己。\n<a name=\"Hf4QR\"></a>\n### 参考代码\n```python\nclass Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        hash_table = dict()\n        for i in range(0,len(nums)):\n            if target - nums[i] in hash_table:\n                return [hash_table[target - nums[i]], i]\n            hash_table[nums[i]] = i\n        return []\n```\n<a name=\"yYA60\"></a>\n### 复杂度分析\n时间复杂度O(n) 最坏遍历一边nums数组,n为数组长度<br />空间复杂度O(n) 主要是哈希表的开销\n",
    "body_draft": "> 哈希表\n\n<a name=\"kSiRo\"></a>\n## 方法一 哈希表\n建立一个哈希表key是数值，value是下标。遍历数组中的元素，若target - nums[i]在哈希表中，则直接返回。<br />若target - nums[i]不在哈希表中，则将这个元素放入哈希表。因为是先判断是否有符合的，再放入哈希表，因此也可以避免找到自己。\n<a name=\"Hf4QR\"></a>\n### 参考代码\n```python\nclass Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        hash_table = dict()\n        for i in range(0,len(nums)):\n            if target - nums[i] in hash_table:\n                return [hash_table[target - nums[i]], i]\n            hash_table[nums[i]] = i\n        return []\n```\n<a name=\"yYA60\"></a>\n### 复杂度分析\n时间复杂度O(n) 最坏遍历一边nums数组,n为数组长度<br />空间复杂度O(n) 主要是哈希表的开销\n",
    "body_html": "<!doctype html><div class=\"lake-content\" typography=\"classic\"><div class=\"ne-quote\"><p id=\"u25bdfc24\" class=\"ne-p\"><span class=\"ne-text\">哈希表</span></p></div><h2 id=\"kSiRo\"><span class=\"ne-text\">方法一 哈希表</span></h2><p id=\"u79201b28\" class=\"ne-p\"><span class=\"ne-text\">建立一个哈希表key是数值，value是下标。遍历数组中的元素，若target - nums[i]在哈希表中，则直接返回。</span></p><p id=\"u8e1d51e0\" class=\"ne-p\"><span class=\"ne-text\">若target - nums[i]不在哈希表中，则将这个元素放入哈希表。因为是先判断是否有符合的，再放入哈希表，因此也可以避免找到自己。</span></p><h3 id=\"Hf4QR\"><span class=\"ne-text\">参考代码</span></h3><pre data-language=\"python\" id=\"Jht89\" class=\"ne-codeblock language-python\">class Solution:\n    def twoSum(self, nums: List[int], target: int) -&gt; List[int]:\n        hash_table = dict()\n        for i in range(0,len(nums)):\n            if target - nums[i] in hash_table:\n                return [hash_table[target - nums[i]], i]\n            hash_table[nums[i]] = i\n        return []</pre><h3 id=\"yYA60\"><span class=\"ne-text\">复杂度分析</span></h3><p id=\"ueb4491d6\" class=\"ne-p\"><span class=\"ne-text\">时间复杂度O(n) 最坏遍历一边nums数组,n为数组长度</span></p><p id=\"u3c060b56\" class=\"ne-p\"><span class=\"ne-text\">空间复杂度O(n) 主要是哈希表的开销</span></p></div>",
    "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"fixed\" /><blockquote data-lake-id=\"ufd9d4005\" id=\"ufd9d4005\"><p data-lake-id=\"u25bdfc24\" id=\"u25bdfc24\"><span data-lake-id=\"u1a2d7b43\" id=\"u1a2d7b43\">哈希表</span></p></blockquote><h2 data-lake-id=\"kSiRo\" id=\"kSiRo\"><span data-lake-id=\"ua1bf13e8\" id=\"ua1bf13e8\">方法一 哈希表</span></h2><p data-lake-id=\"u79201b28\" id=\"u79201b28\"><span data-lake-id=\"u2a728cf0\" id=\"u2a728cf0\">建立一个哈希表key是数值，value是下标。遍历数组中的元素，若target - nums[i]在哈希表中，则直接返回。</span></p><p data-lake-id=\"u8e1d51e0\" id=\"u8e1d51e0\"><span data-lake-id=\"u606ab712\" id=\"u606ab712\">若target - nums[i]不在哈希表中，则将这个元素放入哈希表。因为是先判断是否有符合的，再放入哈希表，因此也可以避免找到自己。</span></p><h3 data-lake-id=\"Hf4QR\" id=\"Hf4QR\"><span data-lake-id=\"u107f8375\" id=\"u107f8375\">参考代码</span></h3><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22python%22%2C%22code%22%3A%22class%20Solution%3A%5Cn%20%20%20%20def%20twoSum(self%2C%20nums%3A%20List%5Bint%5D%2C%20target%3A%20int)%20-%3E%20List%5Bint%5D%3A%5Cn%20%20%20%20%20%20%20%20hash_table%20%3D%20dict()%5Cn%20%20%20%20%20%20%20%20for%20i%20in%20range(0%2Clen(nums))%3A%5Cn%20%20%20%20%20%20%20%20%20%20%20%20if%20target%20-%20nums%5Bi%5D%20in%20hash_table%3A%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20%5Bhash_table%5Btarget%20-%20nums%5Bi%5D%5D%2C%20i%5D%5Cn%20%20%20%20%20%20%20%20%20%20%20%20hash_table%5Bnums%5Bi%5D%5D%20%3D%20i%5Cn%20%20%20%20%20%20%20%20return%20%5B%5D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22Jht89%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"yYA60\" id=\"yYA60\"><span data-lake-id=\"u43652109\" id=\"u43652109\">复杂度分析</span></h3><p data-lake-id=\"ueb4491d6\" id=\"ueb4491d6\"><span data-lake-id=\"ubcf0b401\" id=\"ubcf0b401\">时间复杂度O(n) 最坏遍历一边nums数组,n为数组长度</span></p><p data-lake-id=\"u3c060b56\" id=\"u3c060b56\"><span data-lake-id=\"ub08ee0d2\" id=\"ub08ee0d2\">空间复杂度O(n) 主要是哈希表的开销</span></p>",
    "body_draft_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"fixed\" /><blockquote data-lake-id=\"ufd9d4005\" id=\"ufd9d4005\"><p data-lake-id=\"u25bdfc24\" id=\"u25bdfc24\"><span data-lake-id=\"u1a2d7b43\" id=\"u1a2d7b43\">哈希表</span></p></blockquote><h2 data-lake-id=\"kSiRo\" id=\"kSiRo\"><span data-lake-id=\"ua1bf13e8\" id=\"ua1bf13e8\">方法一 哈希表</span></h2><p data-lake-id=\"u79201b28\" id=\"u79201b28\"><span data-lake-id=\"u2a728cf0\" id=\"u2a728cf0\">建立一个哈希表key是数值，value是下标。遍历数组中的元素，若target - nums[i]在哈希表中，则直接返回。</span></p><p data-lake-id=\"u8e1d51e0\" id=\"u8e1d51e0\"><span data-lake-id=\"u606ab712\" id=\"u606ab712\">若target - nums[i]不在哈希表中，则将这个元素放入哈希表。因为是先判断是否有符合的，再放入哈希表，因此也可以避免找到自己。</span></p><h3 data-lake-id=\"Hf4QR\" id=\"Hf4QR\"><span data-lake-id=\"u107f8375\" id=\"u107f8375\">参考代码</span></h3><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22python%22%2C%22code%22%3A%22class%20Solution%3A%5Cn%20%20%20%20def%20twoSum(self%2C%20nums%3A%20List%5Bint%5D%2C%20target%3A%20int)%20-%3E%20List%5Bint%5D%3A%5Cn%20%20%20%20%20%20%20%20hash_table%20%3D%20dict()%5Cn%20%20%20%20%20%20%20%20for%20i%20in%20range(0%2Clen(nums))%3A%5Cn%20%20%20%20%20%20%20%20%20%20%20%20if%20target%20-%20nums%5Bi%5D%20in%20hash_table%3A%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20%5Bhash_table%5Btarget%20-%20nums%5Bi%5D%5D%2C%20i%5D%5Cn%20%20%20%20%20%20%20%20%20%20%20%20hash_table%5Bnums%5Bi%5D%5D%20%3D%20i%5Cn%20%20%20%20%20%20%20%20return%20%5B%5D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22Jht89%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"yYA60\" id=\"yYA60\"><span data-lake-id=\"u43652109\" id=\"u43652109\">复杂度分析</span></h3><p data-lake-id=\"ueb4491d6\" id=\"ueb4491d6\"><span data-lake-id=\"ubcf0b401\" id=\"ubcf0b401\">时间复杂度O(n) 最坏遍历一边nums数组,n为数组长度</span></p><p data-lake-id=\"u3c060b56\" id=\"u3c060b56\"><span data-lake-id=\"ub08ee0d2\" id=\"ub08ee0d2\">空间复杂度O(n) 主要是哈希表的开销</span></p>",
    "public": 1,
    "status": 1,
    "view_status": 0,
    "read_status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2022-04-24T07:03:34.000Z",
    "deleted_at": null,
    "created_at": "2022-04-24T06:49:31.000Z",
    "updated_at": "2022-04-24T10:34:38.000Z",
    "published_at": "2022-04-24T07:03:34.000Z",
    "first_published_at": "2022-04-24T07:03:34.095Z",
    "word_count": 184,
    "cover": null,
    "description": "哈希表方法一 哈希表建立一个哈希表key是数值，value是下标。遍历数组中的元素，若target - nums[i]在哈希表中，则直接返回。若target - nums[i]不在哈希表中，则将这个元素放入哈希表。因为是先判断是否有符合的，再放入哈希表，因此也可以避免找到自己。参考代码clas...",
    "custom_description": null,
    "hits": 0,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 74873410,
    "slug": "mpaiez",
    "title": "1.两数之和",
    "book_id": 27055002,
    "book": {
      "id": 27055002,
      "type": "Book",
      "slug": "leetcode",
      "name": "leetcode",
      "user_id": 328252,
      "description": "",
      "creator_id": 328252,
      "public": 1,
      "items_count": 6,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2022-04-24T11:45:16.394Z",
      "updated_at": "2022-04-24T11:45:16.000Z",
      "created_at": "2022-04-23T06:49:14.000Z",
      "namespace": "lmikoto/leetcode",
      "user": {
        "id": 328252,
        "type": "User",
        "login": "lmikoto",
        "name": "lmikoto",
        "description": null,
        "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/328252/1578028416108-avatar/38f12fe6-da0d-471e-819c-7131fadbd750.png",
        "books_count": 16,
        "public_books_count": 2,
        "followers_count": 0,
        "following_count": 0,
        "created_at": "2019-04-25T04:31:29.000Z",
        "updated_at": "2022-04-24T11:44:44.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 328252,
    "creator": {
      "id": 328252,
      "type": "User",
      "login": "lmikoto",
      "name": "lmikoto",
      "description": null,
      "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/328252/1578028416108-avatar/38f12fe6-da0d-471e-819c-7131fadbd750.png",
      "books_count": 16,
      "public_books_count": 2,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2019-04-25T04:31:29.000Z",
      "updated_at": "2022-04-24T11:44:44.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "\n",
    "body_draft": "\n",
    "body_html": "<!doctype html><div class=\"lake-content\" typography=\"classic\"><p id=\"u204acf10\" class=\"ne-p\"><br></p></div>",
    "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"fixed\" /><meta name=\"paragraphSpacing\" content=\"relax\" /><p data-lake-id=\"u204acf10\" id=\"u204acf10\"><br></p>",
    "body_draft_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"fixed\" /><meta name=\"paragraphSpacing\" content=\"relax\" /><p data-lake-id=\"u204acf10\" id=\"u204acf10\"><br></p>",
    "public": 1,
    "status": 1,
    "view_status": 0,
    "read_status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2022-04-24T11:45:00.000Z",
    "deleted_at": null,
    "created_at": "2022-04-24T11:44:28.000Z",
    "updated_at": "2022-04-24T11:45:16.000Z",
    "published_at": "2022-04-24T11:45:00.000Z",
    "first_published_at": "2022-04-24T11:44:59.954Z",
    "word_count": 0,
    "cover": null,
    "description": "",
    "custom_description": null,
    "hits": 0,
    "_serializer": "v2.doc_detail"
  }
]